{"version":3,"sources":["components/india.jpg","components/home.jsx","components/user.jsx","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","state","posts","handleClick","a","get","data","setState","className","this","map","post","key","id","title","onClick","Component","User","src","india","alt","width","height","Navbar","Fragment","class","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,mC,uPCwD5BC,E,4MAlDXC,MAAM,CACFC,MAAM,I,EAEVC,Y,sBAAY,8BAAAC,EAAA,sEACoBC,cAAI,8CADxB,gBACKH,EADL,EACFI,KACN,EAAKC,SAAS,CAACL,UAFP,2C,uDAKV,OACE,6BACA,qDAEA,kBAAC,IAAD,MACA,2BAAOM,UAAU,SACf,+BACE,4BACE,qCACA,sCACA,wCAGJ,+BACGC,KAAKR,MAAMC,MAAMQ,KAAI,SAACC,GAAD,OACpB,wBAAIC,IAAKD,EAAKE,IACZ,4BAAKF,EAAKG,OACV,4BACE,4BACEN,UAAU,uBADZ,WAOF,4BACE,4BACEA,UAAU,yBADZ,iBAWV,4BAAQO,QAASN,KAAKN,YAAcK,UAAU,uBAA9C,mB,GA9CWQ,a,iBCMJC,EATJ,WACP,OACI,6BACA,qDACA,yBAAKC,IAAKC,IAAOC,IAAI,QAAQC,MAAM,QAAQC,OAAO,Y,QCyB3CC,E,uKAzBP,OACI,kBAAC,IAAMC,SAAP,KACA,yBAAKC,MAAM,iDACX,uBAAGA,MAAM,eAAeC,KAAK,KAA7B,QACV,4BAAQD,MAAM,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBACtJ,0BAAMP,MAAM,yBAEd,yBAAKA,MAAM,2BAA2BZ,GAAG,aACvC,wBAAIY,MAAM,cACR,wBAAIA,MAAM,mBACR,kBAAC,IAAD,CAAMQ,GAAG,IAAIR,MAAM,YAAnB,SAEF,wBAAIA,MAAM,YACR,kBAAC,IAAD,CAAMQ,GAAG,QAAQR,MAAM,YAAvB,SAEF,wBAAIA,MAAM,YACR,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,kB,GAnBaV,aCuBNkB,G,6KAdX,OACE,kBAAC,IAAMV,SAAP,KACA,6BACE,kBAAC,EAAD,MACD,6BACC,kBAAC,IAAD,CAAOW,KAAK,IAAIC,OAAK,EAACC,UAAWrC,IACjC,kBAAC,IAAD,CAAOmC,KAAK,QAAQC,OAAK,EAACC,UAAWpB,W,GAT3BD,cCGEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.24e18a7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/india.ec80c6a3.jpg\";","\r\nimport React, { Component } from 'react';\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport {get} from \"axios\";\r\n\r\nclass Home extends Component{\r\n    state={\r\n        posts:[],\r\n    }\r\n    handleClick=async ()=>{\r\n        const{data : posts} = await get(\"https://jsonplaceholder.typicode.com/posts\");\r\n        this.setState({posts});\r\n      }\r\n      render(){\r\n      return(\r\n        <div>\r\n        <h1>This is the home page</h1>\r\n        \r\n        <ToastContainer/>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Title</th>\r\n              <th>Update</th>\r\n              <th>Delete</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.posts.map((post) => (\r\n              <tr key={post.id}>\r\n                <td>{post.title}</td>\r\n                <td>\r\n                  <button\r\n                    className=\"btn btn-info btn-sm\"\r\n                   \r\n                  >\r\n                    Update\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    className=\"btn btn-danger btn-sm\"\r\n                    \r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <button onClick={this.handleClick}  className=\"btn btn-info btn-sm\" >Fetch Data</button>\r\n        </div>\r\n    );\r\n      }\r\n}\r\nexport default Home;","import React from \"react\";\r\nimport india from \"./india.jpg\";\r\nconst User=()=>{\r\n    return(\r\n        <div>\r\n        <h1>This is the user page</h1>\r\n        <img src={india} alt=\"India\" width=\"100px\" height=\"100px\"></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default User;","import React,{Component} from \"react\";\r\nimport{Link, BrowserRouter} from \"react-router-dom\";\r\n\r\nclass Navbar extends Component{\r\n    render()\r\n    {\r\n        return(\r\n            <React.Fragment>\r\n            <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <a class=\"navbar-brand\" href=\"#\">LOGO</a>\r\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n  <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n    <ul class=\"navbar-nav\">\r\n      <li class=\"nav-item active\">\r\n        <Link to=\"/\" class=\"nav-link\">Home</Link>\r\n       </li>\r\n      <li class=\"nav-item\">\r\n        <Link to=\"/User\" class=\"nav-link\">User</Link>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link\" href=\"#\">About</a>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</nav>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default Navbar;","import React, { Component } from \"react\";\nimport {Route} from \"react-router-dom\";\nimport Home from \"./components/home\"\nimport User from \"./components/user\";\nimport NavBar from \"./components/navbar\";\nimport \"./App.css\";\n\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <React.Fragment>\n      <div>\n        <NavBar />\n       <div>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/User\" exact component={User} />\n        </div>\n      </div>\n    </React.Fragment>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n  <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}